/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Gameplay.MVC.GameController;
import Gameplay.MVC.Timer.TimeClass;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBException;
import xmlhandling.Player;
import xmlhandling.Players;
import xmlhandling.XMLHandler;

/**
 *
 * @author DELL
 */
public class GameFrame extends javax.swing.JFrame {

    GameController gamecontroller = GameController.getInstance();
    Players players = null;
    Player p1 = new Player();

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                JFrame frame = (JFrame) e.getSource();
                //pause and save game
                gamecontroller.stopTimers();

                int result = JOptionPane.showConfirmDialog(
                        frame,
                        "Back to Main Menu?, Your Data will be saved",
                        "Exit Game",
                        JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {

                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    saveData();

                }

                //resume game
                if (result == JOptionPane.NO_OPTION) {
                    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    gamecontroller.resumeTimers();
                }

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel1 = new gui.GamePanel();
        timeLabel = new javax.swing.JLabel();
        currentScoreValue = new javax.swing.JLabel();
        remainingLives = new javax.swing.JLabel();
        currentScoreLabel = new javax.swing.JLabel();
        highScoreLabel1 = new javax.swing.JLabel();
        highScoreValue = new javax.swing.JLabel();
        timeValue = new javax.swing.JLabel();
        livesValue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        timeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 0));
        timeLabel.setText("Time: ");

        currentScoreValue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        currentScoreValue.setForeground(new java.awt.Color(255, 255, 0));
        currentScoreValue.setText("0");

        remainingLives.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        remainingLives.setForeground(new java.awt.Color(255, 255, 0));
        remainingLives.setText("Remaining Lives:");

        currentScoreLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        currentScoreLabel.setForeground(new java.awt.Color(255, 255, 0));
        currentScoreLabel.setText("Current Score: ");

        highScoreLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        highScoreLabel1.setForeground(new java.awt.Color(255, 255, 0));
        highScoreLabel1.setText("High Score: ");

        highScoreValue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        highScoreValue.setForeground(new java.awt.Color(255, 255, 0));
        highScoreValue.setText("0");

        timeValue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        timeValue.setForeground(new java.awt.Color(255, 255, 0));
        timeValue.setText("00 : 00");

        livesValue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        livesValue.setForeground(new java.awt.Color(255, 255, 0));
        livesValue.setText("3");

        javax.swing.GroupLayout gamePanel1Layout = new javax.swing.GroupLayout(gamePanel1);
        gamePanel1.setLayout(gamePanel1Layout);
        gamePanel1Layout.setHorizontalGroup(
            gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentScoreLabel)
                    .addComponent(highScoreLabel1))
                .addGap(36, 36, 36)
                .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentScoreValue)
                    .addComponent(highScoreValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 604, Short.MAX_VALUE)
                .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remainingLives)
                    .addComponent(timeLabel))
                .addGap(32, 32, 32)
                .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(livesValue)
                    .addComponent(timeValue))
                .addGap(32, 32, 32))
        );
        gamePanel1Layout.setVerticalGroup(
            gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highScoreValue)
                            .addComponent(highScoreLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentScoreLabel)
                            .addComponent(currentScoreValue)))
                    .addGroup(gamePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(gamePanel1Layout.createSequentialGroup()
                            .addComponent(timeValue)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(livesValue))
                        .addGroup(gamePanel1Layout.createSequentialGroup()
                            .addComponent(timeLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(remainingLives))))
                .addContainerGap(562, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param score
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GameFrame().setVisible(true);
//            }
//        });
//    }
    //make these un-static later
    public void setCurrentScore(int score) {
        currentScoreValue.setText(Integer.toString(score));
    }

    public void setHighScore(int highScore) {
        highScoreValue.setText(Integer.toString(highScore));
    }

    public void setTime(TimeClass time) {
        timeValue.setText(String.format("%02d", time.getMinute()) + " : " + String.format("%02d", time.getSecond()));
    }

    public void setLives(int lives) {
        livesValue.setText(Integer.toString(lives));
    }

    public GamePanel getGamePanel1() {
        return gamePanel1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentScoreLabel;
    private javax.swing.JLabel currentScoreValue;
    private gui.GamePanel gamePanel1;
    private javax.swing.JLabel highScoreLabel1;
    private javax.swing.JLabel highScoreValue;
    private javax.swing.JLabel livesValue;
    private javax.swing.JLabel remainingLives;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeValue;
    // End of variables declaration//GEN-END:variables

    public void endGame() {
        saveData();
        JOptionPane.showMessageDialog(this, "Game Over", "Game Over", JOptionPane.WARNING_MESSAGE);
        this.dispose();
    }

    //modify to save gameobjects as an array
    public void saveData() {
        try {
            players = (Players) XMLHandler.getInstance().unmarshall();
        } catch (JAXBException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < players.getPlayers().size(); i++) {

            if (players.getPlayers().get(i).getName().equalsIgnoreCase(gamecontroller.getName())) {

                players.getPlayers().get(i).setClassicHighscore(gamecontroller.getClassicHighScore());
                players.getPlayers().get(i).setArcadeHighscore(gamecontroller.getArcadeHighScore());
                players.getPlayers().get(i).setLives(gamecontroller.getLives());
                players.getPlayers().get(i).setScore(gamecontroller.getScore());
            }

        }
        try {
            XMLHandler.getInstance().marshall(players);
        } catch (JAXBException ex) {
            JOptionPane.showMessageDialog(this, "Cannot Save Data");
        }
    }

    public void hideLives() {
        remainingLives.setVisible(false);
        livesValue.setVisible(false);
    }

    public void showLives() {
        remainingLives.setVisible(true);
        livesValue.setVisible(true);
    }

    public void startGameTimer() {
        this.gamePanel1.startGameTimer();
    }

    public void resumeGameTimer() {
        this.gamePanel1.resumeGameTimer();
    }

    public void setDiffState(int state) {
        this.gamePanel1.setDiffState(state);
    }

    public void setMode(int mode) {
        this.gamePanel1.setMode(mode);
    }

    public void stopGameTimer() {
        this.gamePanel1.stopGameTimer();
    }
}
